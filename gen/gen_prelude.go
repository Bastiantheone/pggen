package gen

import (
	"bufio"
	"os"
	"path/filepath"
	"text/template"
)

func (g *Generator) genPrelude() error {
	preludeName := filepath.Join(filepath.Dir(g.config.OutputFileName), "pggen_prelude.gen.go")
	outFile, err := os.OpenFile(preludeName, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
	if err != nil {
		return err
	}
	defer outFile.Close()
	out := bufio.NewWriter(outFile)
	defer out.Flush()

	type PreludeTmplCtx struct {
		Pkg string
	}
	tmplCtx := PreludeTmplCtx{
		Pkg: g.pkg,
	}
	return preludeTmpl.Execute(out, tmplCtx)
}

var preludeTmpl *template.Template = template.Must(template.New("prelude-tmpl").Parse(`
// Code generated by pggen. DO NOT EDIT

package {{ .Pkg }}

import (
	"strings"
	"fmt"

	"github.com/willf/bitset"

	"github.com/opendoor-labs/pggen"
)

// PGClient wraps either a 'sql.DB' or a 'sql.Tx'. All pggen-generated
// database access methods for package {{ .Pkg }} are attached to it.
type PGClient struct {
	DB pggen.DBHandle
}

func genBulkInsert(
	table string,
	fields []string,
	nrecords int,
	pkeyName string,
) string {
	var ret strings.Builder

	ret.WriteString("INSERT INTO ")
	ret.WriteString(table)
	ret.WriteString(" (")
	ret.WriteString(strings.Join(fields, ", "))
	ret.WriteString(") VALUES ")

	for recNo := 0; recNo < nrecords; recNo++ {
		slots := make([]string, len(fields))[:0]
		for colNo := 1; colNo <= len(fields); colNo++ {
			slots = append(
				slots,
				fmt.Sprintf("$%d", (recNo * len(fields)) + colNo),
			)
		}
		ret.WriteString("	(")
		ret.WriteString(strings.Join(slots, ", "))
		if recNo < nrecords - 1 {
			ret.WriteString("),\n")
		} else {
			ret.WriteString(")\n")
		}
	}

	ret.WriteString(" RETURNING ")
	ret.WriteString(pkeyName)

	return ret.String()
}

func genUpdateStmt(
	table string,
	pgPkey string,
	fields []string,
	fieldMask *bitset.BitSet,
	pkeyName string,
) string {
	var ret strings.Builder

	ret.WriteString("UPDATE ")
	ret.WriteString(table)
	ret.WriteString(" SET ")

	lhs := make([]string, len(fields))[:0]
	rhs := make([]string, len(fields))[:0]
	argNo := 1
	for i, f := range fields {
		if fieldMask.Test(uint(i)) {
			lhs = append(lhs, f)
			rhs = append(rhs, fmt.Sprintf("$%d", argNo))
			argNo++
		}
	}

	if len(lhs) > 1 {
		ret.WriteString(parenWrap(strings.Join(lhs, ", ")))
	} else {
		ret.WriteString(lhs[0])
	}
	ret.WriteString(" = ")
	if len(rhs) > 1 {
		ret.WriteString(parenWrap(strings.Join(rhs, ", ")))
	} else {
		ret.WriteString(rhs[0])
	}
	ret.WriteString(" WHERE ")
	ret.WriteString(pgPkey)
	ret.WriteString(" = ")
	ret.WriteString(fmt.Sprintf("$%d", argNo))

	ret.WriteString(" RETURNING ")
	ret.WriteString(pkeyName)

	return ret.String()
}

func parenWrap(in string) string {
	return "(" + in + ")"
}
`))
